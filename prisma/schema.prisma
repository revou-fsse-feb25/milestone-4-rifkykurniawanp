generator client {
  provider = "prisma-client-js"
  // output = "../../libs/prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  email     String      @unique @db.VarChar(320)
  password  String
  role      UserRole    @default(USER)
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt      @map("updated_at")
  
  // Relations
  accounts  Account[]

  @@map("users")
  @@index([email])
  @@index([isActive])
}

model Account {
  id           Int               @id @default(autoincrement())
  name         String            @db.VarChar(100)
  type         AccountType       @default(CHECKING)
  status       AccountStatus     @default(ACTIVE)
  balance      Decimal           @default(0.00) @db.Decimal(12, 2)
  currency     String            @default("USD") @db.VarChar(3)
  userId       Int               @map("user_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt      @map("updated_at")
  
  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
  @@index([name])
  @@index([userId])
  @@index([type])
  @@index([status])
  @@unique([userId, name]) // Prevent duplicate account names per user
}

model Transaction {
  id          Int             @id @default(autoincrement())
  amount      Decimal         @db.Decimal(12, 2)
  type        TransactionType
  category    String?         @db.VarChar(50)
  description String?         @db.VarChar(255)
  reference   String?         @db.VarChar(100) // Reference number or ID
  status      TransactionStatus @default(COMPLETED)
  accountId   Int             @map("account_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt      @map("updated_at")
  
  // Relations
  account     Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("transactions")
  @@index([accountId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([category])
}

// Enums
enum UserRole {
  ADMIN
  USER
  MODERATOR
}

enum AccountType {
  CHECKING
  SAVINGS
  LOAN
  CREDIT_CARD
  INVESTMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CLOSED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}