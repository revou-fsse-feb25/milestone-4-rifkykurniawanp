generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(320)
  password  String
  role      UserRole  @default(USER)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt      @map("updated_at")

  accounts  Account[]

  @@map("users")
  @@index([email])
  @@index([isActive])
}

model Account {
  id           Int               @id @default(autoincrement())
  name         String            @db.VarChar(100)
  type         AccountType       @default(CHECKING)
  status       AccountStatus     @default(ACTIVE)
  balance      Decimal           @default(0.00) @db.Decimal(12, 2)
  currency     String            @default("USD") @db.VarChar(3)
  userId       Int               @map("user_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt      @map("updated_at")

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentTransactions    Transaction[] @relation("SenderAccount")
  receivedTransactions Transaction[] @relation("ReceiverAccount")

  @@map("accounts")
  @@unique([userId, name])
  @@index([userId])
}

model Transaction {
  id            Int                @id @default(autoincrement())
  amount        Decimal            @db.Decimal(12, 2)
  type          TransactionType
  category      String?            @db.VarChar(50)
  description   String?            @db.VarChar(255)
  reference     String?            @db.VarChar(100)
  status        TransactionStatus  @default(COMPLETED)
  fromAccountId Int?               @map("from_account_id")
  toAccountId   Int?               @map("to_account_id")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt      @map("updated_at")

  fromAccount   Account?           @relation("SenderAccount", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount     Account?           @relation("ReceiverAccount", fields: [toAccountId], references: [id], onDelete: Cascade)

  @@map("transactions")
  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  USER
}

enum AccountType {
  CHECKING
  SAVINGS
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
